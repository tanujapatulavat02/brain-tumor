
import cv2
import os
import tensorflow as tf
from tensorflow import keras
from PIL import Image
import numpy as np
from sklearn.model_selection import train_test_split
from keras.utils import normalize
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.utils import to_categorical

image_directory=&#39;datasets/&#39;

no_tumor_images=os.listdir(image_directory+ &#39;no/&#39;)
yes_tumor_images=os.listdir(image_directory+ &#39;yes/&#39;)
dataset=[]
label=[]

INPUT_SIZE=64
# print(no_tumor_images)

# path=&#39;no0.jpg&#39;

# print(path.split(&#39;.&#39;)[1])

for i , image_name in enumerate(no_tumor_images):
if(image_name.split(&#39;.&#39;)[1]==&#39;jpg&#39;):
image=cv2.imread(image_directory+&#39;no/&#39;+image_name)
image=Image.fromarray(image,&#39;RGB&#39;)
image=image.resize((INPUT_SIZE,INPUT_SIZE))
dataset.append(np.array(image))

label.append(0)

for i , image_name in enumerate(yes_tumor_images):
if(image_name.split(&#39;.&#39;)[1]==&#39;jpg&#39;):
image=cv2.imread(image_directory+&#39;yes/&#39;+image_name)
image=Image.fromarray(image, &#39;RGB&#39;)
image=image.resize((INPUT_SIZE,INPUT_SIZE))
dataset.append(np.array(image))
label.append(1)

dataset=np.array(dataset)
label=np.array(label)

x_train, x_test, y_train, y_test=train_test_split(dataset, label, test_size=0.2, random_state=0)

# Reshape = (n, image_width, image_height, n_channel)

# print(x_train.shape)
# print(y_train.shape)

# print(x_test.shape)
# print(y_test.shape)

x_train=normalize(x_train, axis=1)
x_test=normalize(x_test, axis=1)

y_train=to_categorical(y_train , num_classes=2)
y_test=to_categorical(y_test , num_classes=2)

# Model Building
# 64,64,3

model=Sequential()

model.add(Conv2D(32, (3,3), input_shape=(INPUT_SIZE, INPUT_SIZE, 3)))
model.add(Activation(&#39;relu&#39;))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(32, (3,3), kernel_initializer=&#39;he_uniform&#39;))
model.add(Activation(&#39;relu&#39;))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64, (3,3), kernel_initializer=&#39;he_uniform&#39;))
model.add(Activation(&#39;relu&#39;))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation(&#39;relu&#39;))
model.add(Dropout(0.5))
model.add(Dense(2))
model.add(Activation(&#39;softmax&#39;))

# Binary CrossEntropy= 1, sigmoid
# Categorical Cross Entryopy= 2 , softmax

model.compile(loss=&#39;categorical_crossentropy&#39;,optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;])

model.fit(x_train, y_train,
batch_size=16,
verbose=1, epochs=10,
validation_data=(x_test, y_test),

shuffle=False)

model.save(&#39;BrainTumor10EpochsCategorical.h5&#39;)
---------------------------------------------------------
Testing the model:

import cv2
from keras.models import load_model
from PIL import Image
import numpy as np

model=load_model(&#39;BrainTumor10EpochsCategorical.h5&#39;)

image=cv2.imread(&#39;C:\\Users\\Saathvik\\Brain tumor\\pred\\pred5.jpg&#39;)

img=Image.fromarray(image)

img=img.resize((64,64))

img=np.array(img)

input_img=np.expand_dims(img, axis=0)

result=model.predict_step(input_img)
print(result)
---------------------------------------------

Executing the model:

import os
import tensorflow as tf

import numpy as np
from tensorflow.keras.preprocessing import image
from PIL import Image
import cv2
from keras.models import load_model
from flask import Flask, request, render_template
from werkzeug.utils import secure_filename

app = Flask(__name__)

model =load_model(&#39;BrainTumor10Epochs.h5&#39;)
print(&#39;Model loaded. Check http://127.0.0.1:5000/&#39;)

def get_className(classNo):
if classNo==0:
return &quot;No Brain Tumor&quot;
elif classNo==1:
return &quot;Yes Brain Tumor&quot;

def getResult(img):
image=cv2.imread(img)
image = Image.fromarray(image, &#39;RGB&#39;)
image = image.resize((64, 64))
image=np.array(image)
input_img = np.expand_dims(image, axis=0)
result=model.predict_step(input_img)
return result

@app.route(&#39;/&#39;, methods=[&#39;GET&#39;])

def index():
return render_template(&#39;index.html&#39;)

@app.route(&#39;/predict&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def upload():
if request.method == &#39;POST&#39;:
f = request.files[&#39;file&#39;]

basepath = os.path.dirname(__file__)
file_path = os.path.join(
basepath, &#39;uploads&#39;, secure_filename(f.filename))
f.save(file_path)
value=getResult(file_path)
result=get_className(value)
return result
return None

if __name__ == &#39;__main__&#39;:
app.run(debug=True)